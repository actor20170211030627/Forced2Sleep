package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.actor.forced2sleep.bean.NovelBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "novel".
*/
public class NovelBeanDao extends AbstractDao<NovelBean, Long> {

    public static final String TABLENAME = "novel";

    /**
     * Properties of entity NovelBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property WebName = new Property(1, String.class, "webName", false, "web_name");
        public final static Property Url = new Property(2, String.class, "url", false, "url");
        public final static Property CreateTime = new Property(3, java.util.Date.class, "createTime", false, "createTime");
        public final static Property Flag = new Property(4, int.class, "flag", false, "flag");
    }


    public NovelBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NovelBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"novel\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"web_name\" TEXT," + // 1: webName
                "\"url\" TEXT," + // 2: url
                "\"createTime\" INTEGER," + // 3: createTime
                "\"flag\" INTEGER NOT NULL );"); // 4: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"novel\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NovelBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String webName = entity.getWebName();
        if (webName != null) {
            stmt.bindString(2, webName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime.getTime());
        }
        stmt.bindLong(5, entity.getFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NovelBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String webName = entity.getWebName();
        if (webName != null) {
            stmt.bindString(2, webName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime.getTime());
        }
        stmt.bindLong(5, entity.getFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NovelBean readEntity(Cursor cursor, int offset) {
        NovelBean entity = new NovelBean();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NovelBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWebName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setFlag(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NovelBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NovelBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NovelBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
